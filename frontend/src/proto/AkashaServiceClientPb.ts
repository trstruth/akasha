/**
 * @fileoverview gRPC-Web generated client stub for akasha
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: akasha.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as akasha_pb from './akasha_pb'; // proto import: "akasha.proto"


export class FlagServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateBoolFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/CreateBoolFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.CreateBoolFlagRequest,
    akasha_pb.CreateBoolFlagResponse,
    (request: akasha_pb.CreateBoolFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.CreateBoolFlagResponse.deserializeBinary
  );

  createBoolFlag(
    request: akasha_pb.CreateBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.CreateBoolFlagResponse>;

  createBoolFlag(
    request: akasha_pb.CreateBoolFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.CreateBoolFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.CreateBoolFlagResponse>;

  createBoolFlag(
    request: akasha_pb.CreateBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.CreateBoolFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/CreateBoolFlag',
        request,
        metadata || {},
        this.methodDescriptorCreateBoolFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/CreateBoolFlag',
    request,
    metadata || {},
    this.methodDescriptorCreateBoolFlag);
  }

  methodDescriptorGetBoolFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/GetBoolFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.GetBoolFlagRequest,
    akasha_pb.GetBoolFlagResponse,
    (request: akasha_pb.GetBoolFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.GetBoolFlagResponse.deserializeBinary
  );

  getBoolFlag(
    request: akasha_pb.GetBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.GetBoolFlagResponse>;

  getBoolFlag(
    request: akasha_pb.GetBoolFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.GetBoolFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.GetBoolFlagResponse>;

  getBoolFlag(
    request: akasha_pb.GetBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.GetBoolFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/GetBoolFlag',
        request,
        metadata || {},
        this.methodDescriptorGetBoolFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/GetBoolFlag',
    request,
    metadata || {},
    this.methodDescriptorGetBoolFlag);
  }

  methodDescriptorUpdateBoolFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/UpdateBoolFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.UpdateBoolFlagRequest,
    akasha_pb.UpdateBoolFlagResponse,
    (request: akasha_pb.UpdateBoolFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.UpdateBoolFlagResponse.deserializeBinary
  );

  updateBoolFlag(
    request: akasha_pb.UpdateBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.UpdateBoolFlagResponse>;

  updateBoolFlag(
    request: akasha_pb.UpdateBoolFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.UpdateBoolFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.UpdateBoolFlagResponse>;

  updateBoolFlag(
    request: akasha_pb.UpdateBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.UpdateBoolFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/UpdateBoolFlag',
        request,
        metadata || {},
        this.methodDescriptorUpdateBoolFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/UpdateBoolFlag',
    request,
    metadata || {},
    this.methodDescriptorUpdateBoolFlag);
  }

  methodDescriptorCreateStringFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/CreateStringFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.CreateStringFlagRequest,
    akasha_pb.CreateStringFlagResponse,
    (request: akasha_pb.CreateStringFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.CreateStringFlagResponse.deserializeBinary
  );

  createStringFlag(
    request: akasha_pb.CreateStringFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.CreateStringFlagResponse>;

  createStringFlag(
    request: akasha_pb.CreateStringFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.CreateStringFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.CreateStringFlagResponse>;

  createStringFlag(
    request: akasha_pb.CreateStringFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.CreateStringFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/CreateStringFlag',
        request,
        metadata || {},
        this.methodDescriptorCreateStringFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/CreateStringFlag',
    request,
    metadata || {},
    this.methodDescriptorCreateStringFlag);
  }

  methodDescriptorGetStringFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/GetStringFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.GetStringFlagRequest,
    akasha_pb.GetStringFlagResponse,
    (request: akasha_pb.GetStringFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.GetStringFlagResponse.deserializeBinary
  );

  getStringFlag(
    request: akasha_pb.GetStringFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.GetStringFlagResponse>;

  getStringFlag(
    request: akasha_pb.GetStringFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.GetStringFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.GetStringFlagResponse>;

  getStringFlag(
    request: akasha_pb.GetStringFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.GetStringFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/GetStringFlag',
        request,
        metadata || {},
        this.methodDescriptorGetStringFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/GetStringFlag',
    request,
    metadata || {},
    this.methodDescriptorGetStringFlag);
  }

  methodDescriptorUpdateStringFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/UpdateStringFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.UpdateStringFlagRequest,
    akasha_pb.UpdateStringFlagResponse,
    (request: akasha_pb.UpdateStringFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.UpdateStringFlagResponse.deserializeBinary
  );

  updateStringFlag(
    request: akasha_pb.UpdateStringFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.UpdateStringFlagResponse>;

  updateStringFlag(
    request: akasha_pb.UpdateStringFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.UpdateStringFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.UpdateStringFlagResponse>;

  updateStringFlag(
    request: akasha_pb.UpdateStringFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.UpdateStringFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/UpdateStringFlag',
        request,
        metadata || {},
        this.methodDescriptorUpdateStringFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/UpdateStringFlag',
    request,
    metadata || {},
    this.methodDescriptorUpdateStringFlag);
  }

  methodDescriptorDeleteFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/DeleteFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.DeleteFlagRequest,
    akasha_pb.DeleteFlagResponse,
    (request: akasha_pb.DeleteFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.DeleteFlagResponse.deserializeBinary
  );

  deleteFlag(
    request: akasha_pb.DeleteFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.DeleteFlagResponse>;

  deleteFlag(
    request: akasha_pb.DeleteFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.DeleteFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.DeleteFlagResponse>;

  deleteFlag(
    request: akasha_pb.DeleteFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.DeleteFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/DeleteFlag',
        request,
        metadata || {},
        this.methodDescriptorDeleteFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/DeleteFlag',
    request,
    metadata || {},
    this.methodDescriptorDeleteFlag);
  }

  methodDescriptorListBoolFlags = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/ListBoolFlags',
    grpcWeb.MethodType.UNARY,
    akasha_pb.ListBoolFlagsRequest,
    akasha_pb.ListBoolFlagsResponse,
    (request: akasha_pb.ListBoolFlagsRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.ListBoolFlagsResponse.deserializeBinary
  );

  listBoolFlags(
    request: akasha_pb.ListBoolFlagsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.ListBoolFlagsResponse>;

  listBoolFlags(
    request: akasha_pb.ListBoolFlagsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.ListBoolFlagsResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.ListBoolFlagsResponse>;

  listBoolFlags(
    request: akasha_pb.ListBoolFlagsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.ListBoolFlagsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/ListBoolFlags',
        request,
        metadata || {},
        this.methodDescriptorListBoolFlags,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/ListBoolFlags',
    request,
    metadata || {},
    this.methodDescriptorListBoolFlags);
  }

  methodDescriptorListStringFlags = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/ListStringFlags',
    grpcWeb.MethodType.UNARY,
    akasha_pb.ListStringFlagsRequest,
    akasha_pb.ListStringFlagsResponse,
    (request: akasha_pb.ListStringFlagsRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.ListStringFlagsResponse.deserializeBinary
  );

  listStringFlags(
    request: akasha_pb.ListStringFlagsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.ListStringFlagsResponse>;

  listStringFlags(
    request: akasha_pb.ListStringFlagsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.ListStringFlagsResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.ListStringFlagsResponse>;

  listStringFlags(
    request: akasha_pb.ListStringFlagsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.ListStringFlagsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/ListStringFlags',
        request,
        metadata || {},
        this.methodDescriptorListStringFlags,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/ListStringFlags',
    request,
    metadata || {},
    this.methodDescriptorListStringFlags);
  }

}

export class MetricsServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetMetrics = new grpcWeb.MethodDescriptor(
    '/akasha.MetricsService/GetMetrics',
    grpcWeb.MethodType.UNARY,
    akasha_pb.GetMetricsRequest,
    akasha_pb.GetMetricsResponse,
    (request: akasha_pb.GetMetricsRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.GetMetricsResponse.deserializeBinary
  );

  getMetrics(
    request: akasha_pb.GetMetricsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.GetMetricsResponse>;

  getMetrics(
    request: akasha_pb.GetMetricsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.GetMetricsResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.GetMetricsResponse>;

  getMetrics(
    request: akasha_pb.GetMetricsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.GetMetricsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.MetricsService/GetMetrics',
        request,
        metadata || {},
        this.methodDescriptorGetMetrics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.MetricsService/GetMetrics',
    request,
    metadata || {},
    this.methodDescriptorGetMetrics);
  }

}

export class EvaluationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorEvaluateBoolFlag = new grpcWeb.MethodDescriptor(
    '/akasha.EvaluationService/EvaluateBoolFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.EvaluateBoolFlagRequest,
    akasha_pb.EvaluateBoolFlagResponse,
    (request: akasha_pb.EvaluateBoolFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.EvaluateBoolFlagResponse.deserializeBinary
  );

  evaluateBoolFlag(
    request: akasha_pb.EvaluateBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.EvaluateBoolFlagResponse>;

  evaluateBoolFlag(
    request: akasha_pb.EvaluateBoolFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.EvaluateBoolFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.EvaluateBoolFlagResponse>;

  evaluateBoolFlag(
    request: akasha_pb.EvaluateBoolFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.EvaluateBoolFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.EvaluationService/EvaluateBoolFlag',
        request,
        metadata || {},
        this.methodDescriptorEvaluateBoolFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.EvaluationService/EvaluateBoolFlag',
    request,
    metadata || {},
    this.methodDescriptorEvaluateBoolFlag);
  }

  methodDescriptorEvaluateStringFlag = new grpcWeb.MethodDescriptor(
    '/akasha.EvaluationService/EvaluateStringFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.EvaluateStringFlagRequest,
    akasha_pb.EvaluateStringFlagResponse,
    (request: akasha_pb.EvaluateStringFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.EvaluateStringFlagResponse.deserializeBinary
  );

  evaluateStringFlag(
    request: akasha_pb.EvaluateStringFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.EvaluateStringFlagResponse>;

  evaluateStringFlag(
    request: akasha_pb.EvaluateStringFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.EvaluateStringFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.EvaluateStringFlagResponse>;

  evaluateStringFlag(
    request: akasha_pb.EvaluateStringFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.EvaluateStringFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.EvaluationService/EvaluateStringFlag',
        request,
        metadata || {},
        this.methodDescriptorEvaluateStringFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.EvaluationService/EvaluateStringFlag',
    request,
    metadata || {},
    this.methodDescriptorEvaluateStringFlag);
  }

}

