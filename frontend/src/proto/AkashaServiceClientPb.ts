/**
 * @fileoverview gRPC-Web generated client stub for akasha
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: akasha.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as akasha_pb from './akasha_pb'; // proto import: "akasha.proto"


export class FlagServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/CreateFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.CreateFlagRequest,
    akasha_pb.CreateFlagResponse,
    (request: akasha_pb.CreateFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.CreateFlagResponse.deserializeBinary
  );

  createFlag(
    request: akasha_pb.CreateFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.CreateFlagResponse>;

  createFlag(
    request: akasha_pb.CreateFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.CreateFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.CreateFlagResponse>;

  createFlag(
    request: akasha_pb.CreateFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.CreateFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/CreateFlag',
        request,
        metadata || {},
        this.methodDescriptorCreateFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/CreateFlag',
    request,
    metadata || {},
    this.methodDescriptorCreateFlag);
  }

  methodDescriptorGetFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/GetFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.GetFlagRequest,
    akasha_pb.GetFlagResponse,
    (request: akasha_pb.GetFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.GetFlagResponse.deserializeBinary
  );

  getFlag(
    request: akasha_pb.GetFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.GetFlagResponse>;

  getFlag(
    request: akasha_pb.GetFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.GetFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.GetFlagResponse>;

  getFlag(
    request: akasha_pb.GetFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.GetFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/GetFlag',
        request,
        metadata || {},
        this.methodDescriptorGetFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/GetFlag',
    request,
    metadata || {},
    this.methodDescriptorGetFlag);
  }

  methodDescriptorUpdateFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/UpdateFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.UpdateFlagRequest,
    akasha_pb.UpdateFlagResponse,
    (request: akasha_pb.UpdateFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.UpdateFlagResponse.deserializeBinary
  );

  updateFlag(
    request: akasha_pb.UpdateFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.UpdateFlagResponse>;

  updateFlag(
    request: akasha_pb.UpdateFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.UpdateFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.UpdateFlagResponse>;

  updateFlag(
    request: akasha_pb.UpdateFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.UpdateFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/UpdateFlag',
        request,
        metadata || {},
        this.methodDescriptorUpdateFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/UpdateFlag',
    request,
    metadata || {},
    this.methodDescriptorUpdateFlag);
  }

  methodDescriptorDeleteFlag = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/DeleteFlag',
    grpcWeb.MethodType.UNARY,
    akasha_pb.DeleteFlagRequest,
    akasha_pb.DeleteFlagResponse,
    (request: akasha_pb.DeleteFlagRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.DeleteFlagResponse.deserializeBinary
  );

  deleteFlag(
    request: akasha_pb.DeleteFlagRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.DeleteFlagResponse>;

  deleteFlag(
    request: akasha_pb.DeleteFlagRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.DeleteFlagResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.DeleteFlagResponse>;

  deleteFlag(
    request: akasha_pb.DeleteFlagRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.DeleteFlagResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/DeleteFlag',
        request,
        metadata || {},
        this.methodDescriptorDeleteFlag,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/DeleteFlag',
    request,
    metadata || {},
    this.methodDescriptorDeleteFlag);
  }

  methodDescriptorListFlags = new grpcWeb.MethodDescriptor(
    '/akasha.FlagService/ListFlags',
    grpcWeb.MethodType.UNARY,
    akasha_pb.ListFlagsRequest,
    akasha_pb.ListFlagsResponse,
    (request: akasha_pb.ListFlagsRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.ListFlagsResponse.deserializeBinary
  );

  listFlags(
    request: akasha_pb.ListFlagsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.ListFlagsResponse>;

  listFlags(
    request: akasha_pb.ListFlagsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.ListFlagsResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.ListFlagsResponse>;

  listFlags(
    request: akasha_pb.ListFlagsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.ListFlagsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.FlagService/ListFlags',
        request,
        metadata || {},
        this.methodDescriptorListFlags,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.FlagService/ListFlags',
    request,
    metadata || {},
    this.methodDescriptorListFlags);
  }

}

export class MetricsServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetMetrics = new grpcWeb.MethodDescriptor(
    '/akasha.MetricsService/GetMetrics',
    grpcWeb.MethodType.UNARY,
    akasha_pb.GetMetricsRequest,
    akasha_pb.GetMetricsResponse,
    (request: akasha_pb.GetMetricsRequest) => {
      return request.serializeBinary();
    },
    akasha_pb.GetMetricsResponse.deserializeBinary
  );

  getMetrics(
    request: akasha_pb.GetMetricsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<akasha_pb.GetMetricsResponse>;

  getMetrics(
    request: akasha_pb.GetMetricsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: akasha_pb.GetMetricsResponse) => void): grpcWeb.ClientReadableStream<akasha_pb.GetMetricsResponse>;

  getMetrics(
    request: akasha_pb.GetMetricsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: akasha_pb.GetMetricsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/akasha.MetricsService/GetMetrics',
        request,
        metadata || {},
        this.methodDescriptorGetMetrics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/akasha.MetricsService/GetMetrics',
    request,
    metadata || {},
    this.methodDescriptorGetMetrics);
  }

}

