# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import akasha_pb2 as akasha__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in akasha_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FlagServiceStub(object):
    """The FlagService defines CRUD operations for flags.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBoolFlag = channel.unary_unary(
                '/akasha.FlagService/CreateBoolFlag',
                request_serializer=akasha__pb2.CreateBoolFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.CreateBoolFlagResponse.FromString,
                _registered_method=True)
        self.GetBoolFlag = channel.unary_unary(
                '/akasha.FlagService/GetBoolFlag',
                request_serializer=akasha__pb2.GetBoolFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.GetBoolFlagResponse.FromString,
                _registered_method=True)
        self.UpdateBoolFlag = channel.unary_unary(
                '/akasha.FlagService/UpdateBoolFlag',
                request_serializer=akasha__pb2.UpdateBoolFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.UpdateBoolFlagResponse.FromString,
                _registered_method=True)
        self.CreateStringFlag = channel.unary_unary(
                '/akasha.FlagService/CreateStringFlag',
                request_serializer=akasha__pb2.CreateStringFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.CreateStringFlagResponse.FromString,
                _registered_method=True)
        self.GetStringFlag = channel.unary_unary(
                '/akasha.FlagService/GetStringFlag',
                request_serializer=akasha__pb2.GetStringFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.GetStringFlagResponse.FromString,
                _registered_method=True)
        self.UpdateStringFlag = channel.unary_unary(
                '/akasha.FlagService/UpdateStringFlag',
                request_serializer=akasha__pb2.UpdateStringFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.UpdateStringFlagResponse.FromString,
                _registered_method=True)
        self.DeleteFlag = channel.unary_unary(
                '/akasha.FlagService/DeleteFlag',
                request_serializer=akasha__pb2.DeleteFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.DeleteFlagResponse.FromString,
                _registered_method=True)
        self.ListBoolFlags = channel.unary_unary(
                '/akasha.FlagService/ListBoolFlags',
                request_serializer=akasha__pb2.ListBoolFlagsRequest.SerializeToString,
                response_deserializer=akasha__pb2.ListBoolFlagsResponse.FromString,
                _registered_method=True)
        self.ListStringFlags = channel.unary_unary(
                '/akasha.FlagService/ListStringFlags',
                request_serializer=akasha__pb2.ListStringFlagsRequest.SerializeToString,
                response_deserializer=akasha__pb2.ListStringFlagsResponse.FromString,
                _registered_method=True)


class FlagServiceServicer(object):
    """The FlagService defines CRUD operations for flags.
    """

    def CreateBoolFlag(self, request, context):
        """BoolFlag operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBoolFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBoolFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStringFlag(self, request, context):
        """StringFlag operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStringFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStringFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFlag(self, request, context):
        """Common operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBoolFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStringFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlagServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBoolFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBoolFlag,
                    request_deserializer=akasha__pb2.CreateBoolFlagRequest.FromString,
                    response_serializer=akasha__pb2.CreateBoolFlagResponse.SerializeToString,
            ),
            'GetBoolFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBoolFlag,
                    request_deserializer=akasha__pb2.GetBoolFlagRequest.FromString,
                    response_serializer=akasha__pb2.GetBoolFlagResponse.SerializeToString,
            ),
            'UpdateBoolFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBoolFlag,
                    request_deserializer=akasha__pb2.UpdateBoolFlagRequest.FromString,
                    response_serializer=akasha__pb2.UpdateBoolFlagResponse.SerializeToString,
            ),
            'CreateStringFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStringFlag,
                    request_deserializer=akasha__pb2.CreateStringFlagRequest.FromString,
                    response_serializer=akasha__pb2.CreateStringFlagResponse.SerializeToString,
            ),
            'GetStringFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStringFlag,
                    request_deserializer=akasha__pb2.GetStringFlagRequest.FromString,
                    response_serializer=akasha__pb2.GetStringFlagResponse.SerializeToString,
            ),
            'UpdateStringFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStringFlag,
                    request_deserializer=akasha__pb2.UpdateStringFlagRequest.FromString,
                    response_serializer=akasha__pb2.UpdateStringFlagResponse.SerializeToString,
            ),
            'DeleteFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFlag,
                    request_deserializer=akasha__pb2.DeleteFlagRequest.FromString,
                    response_serializer=akasha__pb2.DeleteFlagResponse.SerializeToString,
            ),
            'ListBoolFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBoolFlags,
                    request_deserializer=akasha__pb2.ListBoolFlagsRequest.FromString,
                    response_serializer=akasha__pb2.ListBoolFlagsResponse.SerializeToString,
            ),
            'ListStringFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStringFlags,
                    request_deserializer=akasha__pb2.ListStringFlagsRequest.FromString,
                    response_serializer=akasha__pb2.ListStringFlagsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akasha.FlagService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('akasha.FlagService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FlagService(object):
    """The FlagService defines CRUD operations for flags.
    """

    @staticmethod
    def CreateBoolFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/CreateBoolFlag',
            akasha__pb2.CreateBoolFlagRequest.SerializeToString,
            akasha__pb2.CreateBoolFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBoolFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/GetBoolFlag',
            akasha__pb2.GetBoolFlagRequest.SerializeToString,
            akasha__pb2.GetBoolFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBoolFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/UpdateBoolFlag',
            akasha__pb2.UpdateBoolFlagRequest.SerializeToString,
            akasha__pb2.UpdateBoolFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateStringFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/CreateStringFlag',
            akasha__pb2.CreateStringFlagRequest.SerializeToString,
            akasha__pb2.CreateStringFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStringFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/GetStringFlag',
            akasha__pb2.GetStringFlagRequest.SerializeToString,
            akasha__pb2.GetStringFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateStringFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/UpdateStringFlag',
            akasha__pb2.UpdateStringFlagRequest.SerializeToString,
            akasha__pb2.UpdateStringFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/DeleteFlag',
            akasha__pb2.DeleteFlagRequest.SerializeToString,
            akasha__pb2.DeleteFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBoolFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/ListBoolFlags',
            akasha__pb2.ListBoolFlagsRequest.SerializeToString,
            akasha__pb2.ListBoolFlagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListStringFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.FlagService/ListStringFlags',
            akasha__pb2.ListStringFlagsRequest.SerializeToString,
            akasha__pb2.ListStringFlagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MetricsServiceStub(object):
    """The MetricsService provides metrics about flag queries.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMetrics = channel.unary_unary(
                '/akasha.MetricsService/GetMetrics',
                request_serializer=akasha__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=akasha__pb2.GetMetricsResponse.FromString,
                _registered_method=True)


class MetricsServiceServicer(object):
    """The MetricsService provides metrics about flag queries.
    """

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=akasha__pb2.GetMetricsRequest.FromString,
                    response_serializer=akasha__pb2.GetMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akasha.MetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('akasha.MetricsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetricsService(object):
    """The MetricsService provides metrics about flag queries.
    """

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.MetricsService/GetMetrics',
            akasha__pb2.GetMetricsRequest.SerializeToString,
            akasha__pb2.GetMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EvaluationServiceStub(object):
    """The EvaluationService allows clients to fetch flag values based on context.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateBoolFlag = channel.unary_unary(
                '/akasha.EvaluationService/EvaluateBoolFlag',
                request_serializer=akasha__pb2.EvaluateBoolFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.EvaluateBoolFlagResponse.FromString,
                _registered_method=True)
        self.EvaluateStringFlag = channel.unary_unary(
                '/akasha.EvaluationService/EvaluateStringFlag',
                request_serializer=akasha__pb2.EvaluateStringFlagRequest.SerializeToString,
                response_deserializer=akasha__pb2.EvaluateStringFlagResponse.FromString,
                _registered_method=True)


class EvaluationServiceServicer(object):
    """The EvaluationService allows clients to fetch flag values based on context.
    """

    def EvaluateBoolFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateStringFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EvaluationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvaluateBoolFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateBoolFlag,
                    request_deserializer=akasha__pb2.EvaluateBoolFlagRequest.FromString,
                    response_serializer=akasha__pb2.EvaluateBoolFlagResponse.SerializeToString,
            ),
            'EvaluateStringFlag': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateStringFlag,
                    request_deserializer=akasha__pb2.EvaluateStringFlagRequest.FromString,
                    response_serializer=akasha__pb2.EvaluateStringFlagResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'akasha.EvaluationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('akasha.EvaluationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EvaluationService(object):
    """The EvaluationService allows clients to fetch flag values based on context.
    """

    @staticmethod
    def EvaluateBoolFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.EvaluationService/EvaluateBoolFlag',
            akasha__pb2.EvaluateBoolFlagRequest.SerializeToString,
            akasha__pb2.EvaluateBoolFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvaluateStringFlag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/akasha.EvaluationService/EvaluateStringFlag',
            akasha__pb2.EvaluateStringFlagRequest.SerializeToString,
            akasha__pb2.EvaluateStringFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
